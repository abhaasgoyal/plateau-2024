@book{donaldknuth1984,
 author = {Donald E. Knuth},
 title = {The TeXbook},
 publisher = {Addison-Wesley Professional},
 year = {1984},
 isbn = {0201134489}
}


@book{leslielamport1994,
 author = {Leslie Lamport},
 title = {LaTeX: A Document Preparation System (2nd Edition)},
 publisher = {Addison-Wesley Professional},
 year = {1994},
 isbn = {0201529831}
}

@misc{libcaprust,
    author = {Rust},
    title = {{A} capability-based {API} modeled after std},
    url = {https://docs.rs/cap-std/0.26.1/cap_std/},
    year = 2023
}

@misc{mitre,
    author = {CVE Details},
    title = {Vulnerabilities By Types/Categories},
    url = {https://www.cvedetails.com/vulnerabilities-by-types.php},
    year = 2023
}

@misc{librust,
    author = {Rust},
    title = {The Rust Standard Library},
    url = {https://doc.rust-lang.org/std/},
    year = 2023
}

@misc{libcapdirrust,
    author = {Rust},
    title = {Capability-based standard directories},
    url = {https://docs.rs/cap-directories/0.26.1/cap_directories/},
    year = 2023
}


@misc{libcaprustpool,
    author = {Rust},
    title = {Capability-based Network Pools},
    url = {https://docs.rs/cap-std/1.0.15/cap_std/net/struct.Pool.html},
    year = 2023
}


@misc {aries,
    author = {ARIES},
    url    = {https://services.anu.edu.au/training/human-ethics-aries-training},
    title  = {{ANU} {R}esearch {I}nformation {E}nterprise {S}ystem},
    year   = 2023
}

@misc {rust2022stackoverflow,
    author = {Stack Overflow},
    title  = {Developer Survey Results},
    url    = {https://survey.stackoverflow.co/2022/#section-most-loved-dreaded-and-wanted-programming-scripting-and-markup-languages}
}

@inproceedings{millerFinancial,
  author       = {Mark S. Miller and
                  Chip Morningstar and
                  Bill Frantz},
  editor       = {Yair Frankel},
  title        = {Capability-Based Financial Instruments},
  booktitle    = {Financial Cryptography, 4th International Conference, {FC} 2000 Anguilla,
                  British West Indies, February 20-24, 2000, Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {1962},
  pages        = {349--378},
  publisher    = {Springer},
  year         = {2000},
  url          = {https://doi.org/10.1007/3-540-45472-1\_24},
  doi          = {10.1007/3-540-45472-1\_24},
  timestamp    = {Tue, 14 May 2019 10:00:38 +0200},
  biburl       = {https://dblp.org/rec/conf/fc/MillerMF00.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@misc{millerCapRights,
    author     = {Mark S. Miller},
    url        = {http://erights.org/elib/capability/deputy.html},
    title      = {The Confused Deputy},
    year       = {1997}
}

@misc{millerKeynote,
    author     = {Mark S. Miller},
    url        = {https://www.youtube.com/watch?v=br9DwtjqmVI},
    year       = {2018},
    title      = {{M}ark{M}'s {O}pening {S}tatement on {SOSP} {P}anel}
}

@misc{rustLove,
    author     = {{Stack Overflow}},
    url        = {https://survey.stackoverflow.co/2022/},
    year       = {2022},
    title      = {Developer Survey}
}

@article{markCapsMyth,
author = {Miller, Mark and Yee, Ka-ping and Shapiro, Jonathan},
year = {2003},
month = {12},
pages = {},
title = {Capability Myths Demolished}
}

@inproceedings{castroThinkAloud,
author = {Fisler, Kathi and Castro, Francisco Enrique Vicente},
title = {Sometimes, Rainfall Accumulates: Talk-Alouds with Novice Functional Programmers},
year = {2017},
isbn = {9781450349680},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3105726.3106183},
doi = {10.1145/3105726.3106183},
abstract = {When functional programming is used in studies of the Rainfall problem in CS1, most students seem to perform fairly well. A handful of students, however, still struggle, though with different surface-level errors than those reported for students programming imperatively. Prior research suggests that novice programmers tackle problems by refining a high-level program schema that they have seen for a similar problem. Functional-programming students, however, have often seen multiple schemas that would apply to Rainfall. How do novices navigate these choices? This paper presents results from a talk-aloud study in which novice functional programmers worked on Rainfall. We describe the criteria that drove students to select, and sometimes switch, their high-level program schema, as well as points where students realized that their chosen schema was not working. Our main contribution lies in our observations of how novice programmers approach a multi-task planning problem in the face of multiple viable schemas.},
booktitle = {Proceedings of the 2017 ACM Conference on International Computing Education Research},
pages = {12–20},
numpages = {9},
keywords = {rainfall, functional programming, program schemas},
location = {Tacoma, Washington, USA},
series = {ICER '17}
}

@inproceedings{nadiaThinkAloud,
author = {Whalley, Jacqueline and Kasto, Nadia},
title = {A Qualitative Think-Aloud Study of Novice Programmers' Code Writing Strategies},
year = {2014},
isbn = {9781450328333},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2591708.2591762},
doi = {10.1145/2591708.2591762},
abstract = {This paper presents part of a larger long term study into the cognitive aspects of the early stages of learning to write computer programs Tasks designed to trigger learning events were used to provide the opportunity to observe student learning, in terms of the development and modification of cognitive structures or schemata, during think aloud sessions. A narrative analysis of six students' attempts to solve these tasks is presented. The students' progression in learning and attitudinal approaches to learning is examined and provides some insight into the cognitive processes involved in learning computer programming.},
booktitle = {Proceedings of the 2014 Conference on Innovation; Technology in Computer Science Education},
pages = {279–284},
numpages = {6},
keywords = {novice programmers, think aloud, schemas, vygotsky},
location = {Uppsala, Sweden},
series = {ITiCSE '14}
}

@misc{owaspTop10,
	author = {OWASP},
	title = {{O}{W}{A}{S}{P} {T}op {T}en | {O}{W}{A}{S}{P} {F}oundation --- owasp.org},
	howpublished = {\url{https://owasp.org/www-project-top-ten/}},
	year = {2021},
	note = {[Accessed 29-May-2023]},
}

@misc{owaspBrokenAccess,
	author = {OWASP},
	title = {{B}roken {A}ccess {C}ontrol | {O}{W}{A}{S}{P} {F}oundation --- owasp.org},
	howpublished = {\url{https://owasp.org/Top10/A01_2021-Broken_Access_Control/}},
	year = {2021},
	note = {[Accessed 29-May-2023]},
}

@article{sel4,
    author           = {Klein, Gerwin and Andronick, June and Elphinstone, Kevin and Heiser, Gernot and Cock, David and
                        Derrin, Philip and Elkaduwe, Dhammika and Engelhardt, Kai and Kolanski, Rafal and Norrish, Michael
                        and Sewell, Thomas and Tuch, Harvey and Winwood, Simon},
    doi              = {10.1145/1743546.1743574},
    journal          = {Communications of the ACM},
    keywords         = {sel4, microkernel, verification},
    month            = jun,
    number           = {6},
    pages            = {107--115},
    paperurl         = {https://trustworthy.systems/publications/nicta_full_text/3783.pdf},
    title            = {{seL4}: Formal Verification of an Operating-System Kernel},
    volume           = {53},
    year             = {2010}
  }

@inproceedings{DBLP:wyvern,
  author       = {Darya Kurilova and
                  Alex Potanin and
                  Jonathan Aldrich},
  editor       = {Joshua Sunshine and
                  Thomas D. LaToza and
                  Craig Anslow},
  title        = {Wyvern: Impacting Software Security via Programming Language Design},
  booktitle    = {Proceedings of the 5th Workshop on Evaluation and Usability of Programming
                  Languages and Tools, Portland, OR, USA, October 21, 2014},
  pages        = {57--58},
  publisher    = {{ACM}},
  year         = {2014},
  url          = {https://doi.org/10.1145/2688204.2688216},
  doi          = {10.1145/2688204.2688216},
  timestamp    = {Tue, 21 Mar 2023 20:58:16 +0100},
  biburl       = {https://dblp.org/rec/conf/oopsla/KurilovaPA14.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:wyvernIO,
  author       = {Jennifer A. Fish and
                  Darya Melicher and
                  Jonathan Aldrich},
  title        = {A case study in language-based security: building an {I/O} library
                  for Wyvern},
  booktitle    = {Proceedings of the 2020 {ACM} {SIGPLAN} International Symposium on
                  New Ideas, New Paradigms, and Reflections on Programming and Software,
                  Onward! 2020, Virtual, November, 2020},
  pages        = {34--47},
  publisher    = {{ACM}},
  year         = {2020},
  url          = {https://doi.org/10.1145/3426428.3426913},
  doi          = {10.1145/3426428.3426913},
  timestamp    = {Sat, 08 Jan 2022 02:24:37 +0100},
  biburl       = {https://dblp.org/rec/conf/oopsla/FishMA20.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@techreport{watson2018capability,
  title={Capability hardware enhanced RISC instructions (CHERI): Notes on the Meltdown and Spectre attacks},
  author={Watson, Robert NM and Woodruff, Jonathan and Roe, Michael and Moore, Simon W and Neumann, Peter G},
  year={2018},
  institution={University of Cambridge, Computer Laboratory}
}

@inproceedings{klein2009sel4,
  title={seL4: Formal verification of an OS kernel},
  author={Klein, Gerwin and Elphinstone, Kevin and Heiser, Gernot and Andronick, June and Cock, David and Derrin, Philip and Elkaduwe, Dhammika and Engelhardt, Kai and Kolanski, Rafal and Norrish, Michael and others},
  booktitle={Proceedings of the ACM SIGOPS 22nd symposium on Operating systems principles},
  pages={207--220},
  year={2009}
}

@book{klabnik2023rust,
  title={The Rust programming language},
  author={Klabnik, Steve and Nichols, Carol},
  year={2023},
  publisher={No Starch Press}
}

@article{steed2016principled,
  title={A principled design of capabilities in Pony},
  author={Steed, George and Drossopoulou, Sophia},
  journal={Master's thesis, Imperial College},
  year={2016}
}

@article{fushcia,
  title={Understanding Fuchsia Security},
  author={Pagano, Francesco and Verderame, Luca and Merlo, Alessio},
  journal={arXiv preprint arXiv:2108.04183},
  year={2021}
}

@article{eProgLang,
  title={The design of the E programming language},
  author={Richardson, Joel E and Carey, Michael J and Schuh, Daniel T},
  journal={ACM Transactions on Programming Languages and Systems (TOPLAS)},
  volume={15},
  number={3},
  pages={494--534},
  year={1993},
  publisher={ACM New York, NY, USA}
}

@article{leijen2014koka,
  title={Koka: Programming with row polymorphic effect types},
  author={Leijen, Daan},
  journal={arXiv preprint arXiv:1406.2061},
  year={2014}
}

@techreport{newspeakProgLang,
  title={Newspeak programming language draft specification version 0.06},
  author={Bracha, Gilad},
  year={2009},
  institution={Technical report, Ministry of Truth}
}
@InProceedings{10.1007/11555827_12,
author="Askarov, Aslan
and Sabelfeld, Andrei",
editor="di Vimercati, Sabrina de Capitani
and Syverson, Paul
and Gollmann, Dieter",
title="Security-Typed Languages for Implementation of Cryptographic Protocols: A Case Study",
booktitle="Computer Security -- ESORICS 2005",
year="2005",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="197--221",
abstract="Security protocols are critical for protecting modern communication infrastructures and are therefore subject to thorough analysis. However practical implementations of these protocols lack the same level of attention and thus may be more exposed to attacks. This paper discusses security assurance provided by security-typed languages when implementing cryptographic protocols. Our results are based on a case study using Jif, a Java-based security-typed language, for implementing a non-trivial cryptographic protocol that allows playing online poker without a trusted third party. The case study deploys the largest program written in a security-typed language to date and identifies insights ranging from security guarantees to useful patterns of secure programming.",
isbn="978-3-540-31981-8"
}

@article{DBLP:journals/darts/MelicherSPA17,
  author       = {Darya Melicher and
                  Yangqingwei Shi and
                  Alex Potanin and
                  Jonathan Aldrich},
  title        = {A Capability-Based Module System for Authority Control (Artifact)},
  journal      = {Dagstuhl Artifacts Ser.},
  volume       = {3},
  number       = {2},
  pages        = {02:1--02:2},
  year         = {2017},
  url          = {https://doi.org/10.4230/DARTS.3.2.2},
  doi          = {10.4230/DARTS.3.2.2},
  timestamp    = {Tue, 01 Sep 2020 14:09:22 +0200},
  biburl       = {https://dblp.org/rec/journals/darts/MelicherSPA17.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{Huang2023,
author = "Ruanqianqian (Lisa) Huang and Elizaveta Pertseva and Michael Coblenz and Sorin Lerner",
title = "{How do Haskell programmers debug?}",
year = "2023",
month = "3",
url = "https://kilthub.cmu.edu/articles/conference_contribution/How_do_Haskell_programmers_debug_/22277347",
doi = "10.1184/R1/22277347.v1"
}
@inproceedings{whalley2014qualitative,
  title={A qualitative think-aloud study of novice programmers' code writing strategies},
  author={Whalley, Jacqueline and Kasto, Nadia},
  booktitle={Proceedings of the 2014 conference on Innovation \& technology in computer science education},
  pages={279--284},
  year={2014}
}

@article{lye2014review,
  title={Review on teaching and learning of computational thinking through programming: What is next for K-12?},
  author={Lye, Sze Yee and Koh, Joyce Hwee Ling},
  journal={Computers in Human Behavior},
  volume={41},
  pages={51--61},
  year={2014},
  publisher={Elsevier}
}

@article{blatz2007csrf,
  title={Csrf: Attack and defense},
  author={Blatz, Jeremiah},
  journal={McAfee{\textregistered} Foundstone{\textregistered} Professional Services, White Paper},
  year={2007}
}
@misc{vscodevuln,
  title={VSCode: CVE Vulnerabilities},
  author={CVE},
  url={https://www.cvedetails.com/vulnerability-list/vendor_id-26/product_id-50646/Microsoft-Visual-Studio-Code.html},
  year={2023}
}


@article{10.1145/3485532,
author = {Lubin, Justin and Chasins, Sarah E.},
title = {How Statically-Typed Functional Programmers Write Code},
year = {2021},
issue_date = {October 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {OOPSLA},
url = {https://doi.org/10.1145/3485532},
doi = {10.1145/3485532},
abstract = {How working statically-typed functional programmers write code is largely understudied. And yet, a better understanding of developer practices could pave the way for the design of more useful and usable tooling, more ergonomic languages, and more effective on-ramps into programming communities. The goal of this work is to address this knowledge gap: to better understand the high-level authoring patterns that statically-typed functional programmers employ. We conducted a grounded theory analysis of 30 programming sessions of practicing statically-typed functional programmers, 15 of which also included a semi-structured interview. The theory we developed gives insight into how the specific affordances of statically-typed functional programming affect domain modeling, type construction, focusing techniques, exploratory and reasoning strategies, and expressions of intent. We conducted a set of quantitative lab experiments to validate our findings, including that statically-typed functional programmers often iterate between editing types and expressions, that they often run their compiler on code even when they know it will not successfully compile, and that they make textual program edits that reliably signal future edits that they intend to make. Lastly, we outline the implications of our findings for language and tool design. The success of this approach in revealing program authorship patterns suggests that the same methodology could be used to study other understudied programmer populations.},
journal = {Proc. ACM Program. Lang.},
month = {oct},
articleno = {155},
numpages = {30},
keywords = {interviews, quantitative, need-finding, static types, grounded theory, randomized controlled trial, mixed methods, functional programming, qualitative}
}

@article{Coblenz2023,
author = "Michael Coblenz and April Porter and Varun Das and Teja Nallagorla and Michael Hicks",
title = "{A Multimodal Study of Challenges Using Rust}",
year = "2023",
month = "3",
url = "https://kilthub.cmu.edu/articles/conference_contribution/A_Multimodal_Study_of_Challenges_Using_Rust/22277326",
doi = "10.1184/R1/22277326.v1"
}

@article{thematic,
author = {Braun, Virginia and Clarke, Victoria},
year = {2006},
month = {01},
pages = {77-101},
title = {Using thematic analysis in psychology},
volume = {3},
journal = {Qualitative Research in Psychology},
doi = {10.1191/1478088706qp063oa}
}

@misc{rustCap,
  author = {Rust},
  title = {Capability-oriented version of the Rust standard library},
  year = {2023},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/bytecodealliance/cap-std}},
}

@misc{goCap,
  author = {Golang},
  title = {Cap'n Proto library and code generator for Go},
  year = {2023},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/capnproto/go-capnp}},
}

@misc{scalaCaps,
  author = {Scala},
  title = {Ocaps: object-capabilities in Scala},
  year = {2023},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/tersesystems/ocaps}},
}